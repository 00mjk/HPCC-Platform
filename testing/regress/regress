#!/usr/bin/env python

'''
/*#############################################################################

    HPCC SYSTEMS software Copyright (C) 2012 HPCC Systems.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
############################################################################ */
'''

import argparse
import logging
import os
import atexit

from hpcc.regression.regress import Regression
from hpcc.util.ecl.file import ECLFile
from hpcc.util.util import checkPqParam

if __name__ == "__main__":
    prog = "regress"
    description = 'HPCC Platform Regression suite'
    parser = argparse.ArgumentParser(prog=prog, description=description)
    parser.add_argument('--version', '-v', action='version',
                        version='%(prog)s 0.0.2')
    parser.add_argument('--config', help="Config file to use.",
                        nargs='?', default="regress.json")
    parser.add_argument('--loglevel', help="Set the log level.",
                        nargs='?', default="info",
                        choices=['info', 'debug'])
    parser.add_argument('--suiteDir', '-s', help="suiteDir to use.",
                        nargs='?', default=".")

    subparsers = parser.add_subparsers(help='sub-command help')
    parser_list = subparsers.add_parser('list', help='list help')
    parser_list.add_argument('clusters', help="Print clusters from config.",
                             action='store_true')

    parser_run = subparsers.add_parser('run', help='run help')
    parser_run.add_argument('cluster', help="Run the cluster suite.",
                            nargs='?', type=str,  default='setup')
    parser_run.add_argument('--pq', help="Parallel query execution with threadNumber threads. ('-1' can be use to calculate usable thread count on a single node system)",
                            type=checkPqParam,  default = 1,   metavar="threadNumber")

    parser_query = subparsers.add_parser('query', help='query help')
    parser_query.add_argument('query', help="Name of a single ECL query (mandatory).",
                              nargs='?', metavar="ECL query")
    parser_query.add_argument('cluster', help="Cluster for single query run. If cluster = 'all' then run single query on all clusters.",
                            nargs='?', default='thor', metavar="target cluster | all")
    parser_query.add_argument('--publish', help="Publish compiled query instead of run.",
                            action='store_true')

    args = parser.parse_args()

    suiteDir = ""
    if 'suiteDir' in args:
        suiteDir = args.suiteDir
    try:
        if 'clusters' in args:
            Clusters = ['setup']
            regress = Regression(args.config, args.loglevel, suiteDir)
            for cluster in regress.config.Clusters:
                Clusters.append(str(cluster))
            print "Avaliable Clusters: "
            for i in Clusters:
                print i
        if 'query' in args:
            if not args.query:
                print "\nMissing ECL query file!\n"
                parser_query.print_help()
                exit()
            regress = Regression(args.config, args.loglevel, suiteDir)
            ecl = os.path.join(regress.dir_ec, args.query)
            eclfile = ECLFile(ecl, regress.dir_a, regress.dir_ex,
                              regress.dir_r)
            targetClusters = []
            if 'all' in args.cluster:
                for cluster in regress.config.Clusters:
                    targetClusters.append(str(cluster))
            else:
                targetClusters.append(args.cluster)
            for cluster in targetClusters:
                logging.warn("Target: %s" % cluster)
                logging.warn("Queries: %s" % 1)
                try:
                    if not eclfile.testSkip(cluster)['skip']:
                        if not eclfile.testExclusion(cluster):
                            report = regress.buildLogging(args.query)
                            if args.publish or eclfile.testPublish():
                                regress.runQuery(cluster, eclfile, report, 1, True)
                            else:
                                regress.runQuery(cluster, eclfile, report)
                            Regression.displayReport(report)
                        else:
                            #print args.query+" excluded on "+cluster+" cluster."
                            logging.warn("%s. %s excluded on this cluster." % (1, args.query))
                    else:
                        #print args.query+" skipped on "+cluster+" cluster."
                        logging.warn("%s. %s skipped on this cluster." % (1, args.query))
                except IOError:
                    #print "Query "+args.query+ " does not exist!"
                    logging.error("%s. Query %s does not exist!" % (1,  args.query))
                    exit()
        elif 'cluster' in args:
            regress = Regression(args.config, args.loglevel, suiteDir,  args.pq)
            regress.bootstrap(args.cluster)
            if 'setup' in args.cluster:
                regress.runSuite('setup', regress.setup)
            else:
                if  args.pq :
                    regress.runSuiteP(args.cluster, regress.suites[args.cluster])
                else:
                    regress.runSuite(args.cluster, regress.suites[args.cluster])
    except Exception as e:
        logging.critical(e)
    except KeyboardInterrupt:
        logging.critical("Keyboard Interrupt Caught.")
